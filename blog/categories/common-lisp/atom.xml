
<!DOCTYPE html>
<!--[if IEMobile 7 ]><html class="no-js iem7"><![endif]-->
<!--[if lt IE 9]><html class="no-js lte-ie8"><![endif]-->
<!--[if (gt IE 8)|(gt IEMobile 7)|!(IEMobile)|!(IE)]><!--><html class="no-js" lang="en"><!--<![endif]-->
<head>
  <meta charset="utf-8">
  <title>Category: common lisp - Textstückchen</title>
  <meta name="author" content="Daniel Brunner">

  
  <meta name="description" content="Category: common lisp">
  

  <!-- http://t.co/dKP3o1e -->
  <meta name="HandheldFriendly" content="True">
  <meta name="MobileOptimized" content="320">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  
  <link rel="canonical" href="http://www.dbrunner.de/blog/categories/common-lisp/atom.xml">
  <link href="/favicon.png" rel="icon">
  <link href="/stylesheets/screen.css" media="screen, projection" rel="stylesheet" type="text/css">
  <link href="/atom.xml" rel="alternate" title="Textstückchen" type="application/atom+xml">
  <script src="/javascripts/modernizr-2.0.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
  <script>!window.jQuery && document.write(unescape('%3Cscript src="./javascripts/libs/jquery.min.js"%3E%3C/script%3E'))</script>
  <script src="/javascripts/octopress.js" type="text/javascript"></script>
  <!--Fonts from Google"s Web font directory at http://google.com/webfonts -->
<link href="//fonts.googleapis.com/css?family=PT+Serif:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css">
<link href="//fonts.googleapis.com/css?family=PT+Sans:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css">

  

</head>

<body   >
  <header role="banner"><hgroup>
  <h1><a href="/">Textstückchen</a></h1>
  
    <h2>Ganz kleine Textstückchen zu Allerlei.</h2>
  
</hgroup>

</header>
  <nav role="navigation"><ul class="subscription" data-subscription="rss">
  <li><a href="/atom.xml" rel="subscribe-rss" title="subscribe via RSS">RSS</a></li>
  
</ul>
  
<form action="https://www.google.com/search" method="get">
  <fieldset role="search">
    <input type="hidden" name="sitesearch" value="www.dbrunner.de">
    <input class="search" type="text" name="q" results="0" placeholder="Search"/>
  </fieldset>
</form>
  
<ul class="main-navigation">
  <li><a href="/">Blog</a></li>
  <li><a href="/publikationen/">Publikationen/Vorträge/Projekte</a></li>
  <li><a href="/blog/archives">Archiv</a></li>
  <li><a href="/impressum/">Impressum</a></li>
</ul>

</nav>
  <div id="main">
    <div id="content">
      <div>
<article role="article">
  
  <header>
    <h1 class="entry-title">Category: common lisp</h1>
    
  </header>
  
  <?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: common lisp | Textstückchen]]></title>
  <link href="http://www.dbrunner.de/blog/categories/common-lisp/atom.xml" rel="self"/>
  <link href="http://www.dbrunner.de/"/>
  <updated>2015-08-27T13:14:16+00:00</updated>
  <id>http://www.dbrunner.de/</id>
  <author>
    <name><![CDATA[Daniel Brunner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DateTime conversion can be tricky]]></title>
    <link href="http://www.dbrunner.de/blog/2014/07/24/datetime-conversion-can-be-tricky/"/>
    <updated>2014-07-24T09:41:36+00:00</updated>
    <id>http://www.dbrunner.de/blog/2014/07/24/datetime-conversion-can-be-tricky</id>
    <content type="html"><![CDATA[<p>I wrote a small Lisp application and a JavaScript client gets some
data from that application. All time stamps are returned as &ldquo;Lisp&rdquo;
time stamps, i.e. an integer with seconds where zero equals Jan 01
1900.</p>

<p>In the JS client the time stamp is then converted to JS time stamps,
i.e. millisconds where zero equals Jan 01 1970.</p>

<p>When testing the application I noticed that sometimes the displayed
date is one day behind. For example in the data base I have Jan 05
1980 but in JavaScript I get a Jan 04 1980. But some other dates
worked: A time stamp Jan 05 1970 was correctly converted to Jan 05
1970.</p>

<p>I had a look into the JavaScript code and found:</p>

<pre><code>convA = function(ts) {
  tmp = new Date(ts*1000);
  tmp.setFullYear(tmp.getFullYear() - 70);
  return tmp.getTime();
}
</code></pre>

<p>It&rsquo;s likely the developer thought: &ldquo;Well, it&rsquo;s millisecond instead of
second. Therefore I multiply by 1,000. But then I am 70 years in the
future and I have to substract 70 years and everything will be ok.&rdquo;</p>

<p>After thinking a while I came to the conclusion: Of course not!</p>

<p>The developer made the assumption that there are as many leap years
between 1900 and 1970 as between <code>ts</code> and <code>ts+70</code>. Obviously that
assumption does not hold for all time stamps. And therefore sometimes
the resulting JavaScript date is one day behind.</p>

<p>So a better solution would be to substract all seconds between 1900
and 1970 from <code>ts</code>, multiply by 1,000 and treat this as a JavaScript
time stamp. Perhaps best would be to do the conversion in the Lisp
process and only deliver a JavaScript-like time stamp.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I learned something about symbols and packages]]></title>
    <link href="http://www.dbrunner.de/blog/2014/07/06/i-learned-something-about-symbols-and-packages/"/>
    <updated>2014-07-06T09:02:39+00:00</updated>
    <id>http://www.dbrunner.de/blog/2014/07/06/i-learned-something-about-symbols-and-packages</id>
    <content type="html"><![CDATA[<p>I am using Common Lisp for developing a web application. Several days
ago a new part of this application didn&rsquo;t worked as supposed and I
spent a considerable large amount of time in finding the bug. It was a
very simple problem with symbols where I mixed something up.</p>

<p>In the application the web server somewhen gets some JSON data from
the browser. It is then converted to Lisp object using the <code>CL-JSON</code>
package. This package converts JSON objects to a-lists and converts
the member keys to symbols (see CL-JSON&rsquo;s <a href="http://common-lisp.net/project/cl-json/">documentation</a>. I then wanted to look something up in that a-list and failed.</p>

<p>I wrote a small test case to show the effect and explain what went wrong.</p>

<pre><code>(ql:quickload '("hunchentoot" "cl-who"))
;; direct loading via ql only for demonstration purposes, normally I
;; would use a asdf:defsystem for that.

(in-package :cl-user)

(defpackage :my-app (:use :cl))

(in-package :my-app)

(defparameter *my-a-list* 
  '((foo . 100)
    (bar . 200)))   ;; in the real application this a-list is
            ;; generated by a JSON-to-lisp conversion by
            ;; CL-JSON; in CL-JSON the object member keys are
            ;; converted to symbols.

(defun get-value (key)
  "Returns the value with KEY from *MY-A-LIST*."
  (cdr (assoc (intern (string-upcase key)) *my-a-list*)))

(hunchentoot:define-easy-handler (web-get-value :uri "/get-value") (id)
  (cl-who:with-html-output-to-string (*standard-output* nil :prologue t)
    (:p (cl-who:fmt "Value of ~a is: ~a" id (get-value id)))))

(defun start ()
  (hunchentoot:start (make-instance 'hunchentoot:easy-acceptor :port 4242)))
</code></pre>

<p>So on the REPL everything looks fine:
<code>
MY-APP&gt; (get-value "foo")
100
MY-APP&gt; (get-value "bar")
200
MY-APP&gt;
</code></p>

<p>But when I used my web browser to give me these results as well I got something strange.
For example here are some results when using curl:
&#8220;`
~> curl <a href="http://localhost:4242/get-value?id=foo">http://localhost:4242/get-value?id=foo</a>
&lt;!DOCTYPE html PUBLIC &ldquo;-//W3C//DTD XHTML 1.0 Strict//EN&rdquo; &ldquo;<a href="http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd</a>&rdquo;></p>

<p>Value of foo is: NIL</p>


<pre><code>
I was puzzled: The value is ```NIL```? 

After some debugging I found out that the easy handler from
Hunchentoot runs with ```*package*``` set to ```COMMON-LISP-USER```
(and not to ```MY-APP``` as I implicitly assumed). That means that ```assoc``` looked up ```COMMON-LISP-USER::FOO``` in the a-list where
the keys are ```MY-APP::FOO``` and ```MY-APP::BAR```. 
And this test fails. Therefore ```NIL``` is returned which is correct.

So I rewrote the ```get-value``` function to:
</code></pre>

<p>(defun get-value (key)
  &ldquo;Returns the value with KEY from <em>MY-A-LIST</em>.&rdquo;
  (cdr (assoc (intern (string-upcase key)
              (find-package :my-app)) <em>my-a-list</em>)))
<code>
Now the symbols are interned in the same package and everything went well:
</code>
~> curl <a href="http://localhost:4242/get-value?id=foo">http://localhost:4242/get-value?id=foo</a>
&lt;!DOCTYPE html PUBLIC &ldquo;-//W3C//DTD XHTML 1.0 Strict//EN&rdquo; &ldquo;<a href="http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd</a>&rdquo;></p>

<p>Value of foo ist: 100</p>


<p>~> curl <a href="http://localhost:4242/get-value?id=bar">http://localhost:4242/get-value?id=bar</a>
&lt;!DOCTYPE html PUBLIC &ldquo;-//W3C//DTD XHTML 1.0 Strict//EN&rdquo; &ldquo;<a href="http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd</a>&rdquo;></p>

<p>Value of bar ist: 200</p>


<p>&#8220;`</p>

<p>Therefore I was reminded to think about packages when interning
 symbols. A good guide to symbols and packages could be found in this
 document: <a href="http://www.flownet.com/gat/packages.pdf">The Complete Idiot&rsquo;s Guide to Common Lisp Packages</a>.</p>
]]></content>
  </entry>
  
</feed>

  
    <footer>
      
      
        <div class="sharing">
  
  <a href="//twitter.com/share" class="twitter-share-button" data-url="http://www.dbrunner.de/blog/categories/common-lisp/atom.xml" data-via="krrrcks" data-counturl="http://www.dbrunner.de/blog/categories/common-lisp/atom.xml" >Tweet</a>
  
  
  
</div>

      
    </footer>
  
</article>

</div>

<aside class="sidebar">
  
    <section>
  <h1><a href="/ueber/">Über mich</a></h1>
</section>

<section>
 <h1>Twitter</h1>
 <div>
 <p><br> 
<a href="http://twitter.com/krrrcks" class="twitter-follow-button" data-show-count="">Follow @krrrcks</a>
</div>
</section>


<section>
  <h1>Neueste Einträge</h1>
  <ul id="recent_posts">
    
      <li class="post">
        <a href="/blog/2015/08/27/running-racket-on-aws-lambda/">Running Racket on AWS Lambda</a>
      </li>
    
      <li class="post">
        <a href="/blog/2015/08/27/lisp-und-ich/">Lisp und ich</a>
      </li>
    
      <li class="post">
        <a href="/blog/2015/03/09/postbank-ein-lottoschein-entspricht-dem-wesen-nach-bargeld/">Postbank: Ein Lottoschein entspricht dem Wesen nach Bargeld</a>
      </li>
    
      <li class="post">
        <a href="/blog/2015/02/17/der-rundfunkrat-des-hr-ubt-den-diskurs/">Der Rundfunkrat des hr übt den Diskurs</a>
      </li>
    
      <li class="post">
        <a href="/blog/2015/02/17/lexmarks-druckerpatronen-lizenz/">Lexmarks Druckerpatronen-Lizenz</a>
      </li>
    
  </ul>
</section>
<section>
  <h1>Kategorien</h1>
    <ul id="category-list"><li><a href='/blog/categories/allerlei/'>allerlei (8)</a></li><li><a href='/blog/categories/ausgehen/'>ausgehen (1)</a></li><li><a href='/blog/categories/aws/'>aws (1)</a></li><li><a href='/blog/categories/azure/'>azure (1)</a></li><li><a href='/blog/categories/behorden/'>behörden (2)</a></li><li><a href='/blog/categories/bucher/'>bücher (1)</a></li><li><a href='/blog/categories/common-lisp/'>common lisp (2)</a></li><li><a href='/blog/categories/docker/'>docker (4)</a></li><li><a href='/blog/categories/gesellschaft/'>gesellschaft (1)</a></li><li><a href='/blog/categories/homepage/'>homepage (10)</a></li><li><a href='/blog/categories/it/'>it (19)</a></li><li><a href='/blog/categories/javascript/'>javascript (1)</a></li><li><a href='/blog/categories/lisp/'>lisp (2)</a></li><li><a href='/blog/categories/medien/'>medien (3)</a></li><li><a href='/blog/categories/morgengrauen/'>morgengrauen (1)</a></li><li><a href='/blog/categories/octopress/'>octopress (6)</a></li><li><a href='/blog/categories/org-mode/'>org-mode (2)</a></li><li><a href='/blog/categories/politik/'>politik (8)</a></li><li><a href='/blog/categories/r/'>r (1)</a></li><li><a href='/blog/categories/racket/'>racket (1)</a></li><li><a href='/blog/categories/reisen/'>reisen (3)</a></li><li><a href='/blog/categories/statistik/'>statistik (1)</a></li><li><a href='/blog/categories/steuern/'>steuern (3)</a></li><li><a href='/blog/categories/veranstaltungen/'>veranstaltungen (3)</a></li><li><a href='/blog/categories/wirtschaft/'>wirtschaft (12)</a></li></ul>
</section>





  
</aside>


    </div>
  </div>
  <footer role="contentinfo"><p>
  Copyright &copy; 2015 - Daniel Brunner -
  <span class="credit">Powered by <a href="http://octopress.org">Octopress</a></span>
</p>

</footer>
  







  <script type="text/javascript">
    (function(){
      var twitterWidgets = document.createElement('script');
      twitterWidgets.type = 'text/javascript';
      twitterWidgets.async = true;
      twitterWidgets.src = '//platform.twitter.com/widgets.js';
      document.getElementsByTagName('head')[0].appendChild(twitterWidgets);
    })();
  </script>





</body>
</html>
